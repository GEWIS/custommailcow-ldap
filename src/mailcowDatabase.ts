import { DataSource, Repository } from 'typeorm';
import axios from 'axios';
import { Defaults, SOGoMailIdentity } from './types';
import { SogoUserProfile } from './entities/SogoUserProfile';
import { Users } from './entities/User';
import { getActiveDirectoryDisplayName, containerConfig } from './index';

// Connection options for the DB
let dataSource: DataSource;
let SogoUserProfileRepository: Repository<SogoUserProfile>;

/**
 * Initialize database connection. Setup database if it does not yet exist
 */
export async function initializeMailcowDatabase(): Promise<void> {
  dataSource = new DataSource({
    type: 'mariadb',
    host: '172.22.1.251',
    port: 3306,
    username: 'mailcow',
    password: containerConfig.DB_PASSWORD,
    database: 'mailcow',
    entities: [SogoUserProfile],
  });

  await dataSource.initialize().catch((error) => {
    console.error(error);
  });

  SogoUserProfileRepository = dataSource.getRepository(SogoUserProfile);
}

/**
 * Edit the signatures of a user
 * @param user - user to edit the signatures of
 * @param SOBs - all SOB for which the user should get signatures
 */
export async function editUserSignatures(user: Users, SOBs: string[]): Promise<void> {
  console.info(`Changing signatures for ${user.email}`);

  const userProfile: SogoUserProfile = await SogoUserProfileRepository.findOneOrFail({
    where: {
      c_uid: user.email,
    },
  });

  const defaultSettings = JSON.parse(userProfile.c_defaults) as Defaults;
  const newIdentities: SOGoMailIdentity[] = [];

  // console.log(defaultSettings.SOGoMailIdentities);
  // for (let identity of defaultSettings.SOGoMailIdentities) {
  //   if (identity.signature.indexOf('class="autogenerated"') === -1) {
  //     newIdentities.push(identity);
  //   }
  // }

  for (const identityMail of SOBs) {
    const committeeDisplayName: string = await getActiveDirectoryDisplayName(identityMail);
    let signature: string = (await axios.get<string>(`https://signature.gewis.nl/${identityMail}`)).data;
    signature = signature.replace('{{displayName}}', user.displayName);
    signature = signature.replaceAll('{{committeeDisplayName}}', committeeDisplayName);
    signature = signature.replaceAll('{{identityMail}}', identityMail);

    signature.replaceAll('', '');

    const newIdentity: SOGoMailIdentity = {
      email: identityMail,
      fullName: `${user.displayName} | ${committeeDisplayName}`,
      replyTo: user.email,
      signature: `${signature}`,
    };
    newIdentities.push(newIdentity);
  }

  defaultSettings.SOGoMailIdentities = newIdentities;
  userProfile.c_defaults = JSON.stringify(defaultSettings);

  await SogoUserProfileRepository.update(user.email, userProfile);
}
