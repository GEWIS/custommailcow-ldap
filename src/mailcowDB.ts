import { DataSource, Repository } from 'typeorm';
import { ContainerConfig, Defaults, SOGoMailIdentity } from './types';
import { SogoUserProfile } from './entities/SogoUserProfile';
import { Users } from './entities/User';
import { getLDAPDisplayName } from './index';
import axios from 'axios';

// Connection options for the DB
let dataSource : DataSource;
let SogoUserProfileRepository: Repository<SogoUserProfile>;

/**
 * Initialize database connection. Setup database if it does not yet exist
 */
export async function initializeMailcowDB(config: ContainerConfig): Promise<void> {
  dataSource = new DataSource({
    type: 'mariadb',
    host: '172.22.1.251',
    port: 3306,
    username: 'mailcow',
    password: config.DB_PASSWORD,
    database: 'mailcow',
    entities: [
      SogoUserProfile,
    ],
  });

  await dataSource.initialize()
    .catch((error) => {
      console.log(error);
    });

  SogoUserProfileRepository = dataSource.getRepository(SogoUserProfile);
}

export async function editUserSignature(user: Users, SOBs: string[]): Promise<void> {
  if (user.email !== 'm9006@gewis.nl' && user.email !== 'm9093@gewis.nl') return;
  console.log(`Changing signatures for ${user.email}`);

  let profile = await SogoUserProfileRepository.findOneOrFail({
    where: {
      c_uid: user.email,
    },
  });

  let cDefaults : Defaults = JSON.parse(profile.c_defaults);
  let newIdentities : SOGoMailIdentity[] = [];

  for (let identity of cDefaults.SOGoMailIdentities) {
    if (identity.signature.indexOf('class="autogenerated"') === -1) {
      newIdentities.push(identity);
    }
  }

  for (let identityMail of SOBs) {
    const committeeDisplayName = await getLDAPDisplayName(identityMail);
    let signature : string = (await axios.get(`https://signature.gewis.nl/${identityMail}`)).data;
    signature = signature.replace('{{displayName}}', user.displayName);
    signature = signature.replaceAll('{{committeeDisplayName}}', committeeDisplayName);
    signature = signature.replaceAll('{{identityMail}}', identityMail);

    signature.replaceAll('', '');

    let newIdentity : SOGoMailIdentity = {
      email: identityMail,
      fullName: `${user.displayName} | ${committeeDisplayName}`,
      replyTo: user.email,
      signature: `${signature}`,
    };
    newIdentities.push(newIdentity);
  }

  cDefaults.SOGoMailIdentities = newIdentities;
  profile.c_defaults = JSON.stringify(cDefaults);

  await SogoUserProfileRepository.update(user.email, profile);
}